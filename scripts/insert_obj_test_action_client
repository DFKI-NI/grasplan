#!/usr/bin/env python3

import sys
import rospy
import actionlib

from grasplan.msg import InsertObjectAction, InsertObjectGoal

if __name__ == '__main__':
    rospy.init_node('insert_object_action_client')

    # Check for namespace and arguments
    if len(sys.argv) > 1:
        if sys.argv[1] != '__ns:=mobipick':
            rospy.logwarn('Have you run this node without the "mobipick" namespace? It might not work!')

        myargv = rospy.myargv()
        if len(myargv) != 3:
            rospy.logfatal(f'Usage: {myargv[0]} support_surface_name observe_before_inserting')
            sys.exit(1)

        # Parse arguments
        support_surface_name = myargv[1]
        observe_before_insert = myargv[2].lower() == 'true'
    else:
        rospy.logwarn('Node launched without arguments; expected at least the "mobipick" namespace ( __ns:=mobipick ).')
        sys.exit(1)

    # Action client setup
    timeout = 50.0  # Timeout in seconds for waiting for result
    insert_object_server_name = 'insert_object'
    action_client = actionlib.SimpleActionClient(insert_object_server_name, InsertObjectAction)

    # Wait for the action server to be available
    rospy.loginfo(f'Waiting for {insert_object_server_name} action server...')
    if action_client.wait_for_server(timeout=rospy.Duration.from_sec(10.0)):
        rospy.loginfo(f'Connected to {insert_object_server_name} action server')

        # Send goal to action server
        goal = InsertObjectGoal()
        goal.support_surface_name = support_surface_name
        goal.observe_before_insert = observe_before_insert
        rospy.loginfo(f'Sending insert goal to {insert_object_server_name} action server')
        action_client.send_goal(goal)

        # Wait for result with specified timeout
        rospy.loginfo(f'Waiting for result from {insert_object_server_name} action server...')
        if action_client.wait_for_result(rospy.Duration.from_sec(timeout)):
            result = action_client.get_result()
            rospy.loginfo(f'{insert_object_server_name} completed execution with result = "{result}"')
            if result.success:
                rospy.loginfo('Successfully inserted object')
            else:
                rospy.logerr('Failed to insert object')
        else:
            # Cancel the goal if timeout occurs
            action_client.cancel_goal()
            rospy.logerr('Failed to insert object within the allocated time. Goal cancellation was sent.')
    else:
        rospy.logerr(f'Action server {insert_object_server_name} not available within the timeout')
